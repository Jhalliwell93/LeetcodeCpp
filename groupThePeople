// the purpose in this algorithm is to complete the challenge described in https://leetcode.com/problems/group-the-people-given-the-group-size-they-belong-to/

#include <iostream>
#include <vector>  // Include vector
#include <cstdlib>  // For std::abs
#include <string>   // For std::string
#include <bitset>
#include <algorithm>

using namespace std;

vector<vector<int>> organiseSize(vector<int>& nums)
{
    vector<vector<int>> ans;                                        // create 2d vector to store answer
    int max_value = *max_element(nums.begin(), nums.end());         // create variable for the highest integer within nums
    int val = 1;

    while(val <= max_value)                                         // starting with a value of 1, run through the while loop until the value is higher then max_value
    {
        vector<int> newVect;                                        // on each iteration of the while loop create a new vector to store values of i
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i] == val)
            {
                newVect.push_back(i);                               // if nums[i] == value, add i to newVector
                if(newVect.size() == val)
                {
                    ans.push_back(newVect);                         // if newVector.size is equal to val, append newVect to ans
                    newVect = {};                                   // reset the newVector
                }
            }
        }
        val += 1;                                                   // increment val
    }
    return ans;
}

void print2DVector(const vector<vector<int>>& vec) {
    // Iterate over the 2D vector
    for (size_t i = 0; i < vec.size(); ++i) {
        for (size_t j = 0; j < vec[i].size(); ++j) {
            cout << vec[i][j] << " ";  // Print element at [i][j]
        }
        cout << endl;  // Newline after each row
    }
}


int main() {

    vector<int> shuff = {3,3,3,3,3,1,3};                            // create vector to pass into function
    vector<vector<int>> res = organiseSize(shuff);
    print2DVector(res);                                             // print answer



    return 0;
}
